---
import { app } from "@/firebase/server";
import { getAuth } from "firebase-admin/auth";
import LoginContainer from "@/components/login-container";
import { Toaster } from "@/components/ui/sonner";

import Layout from "@/layouts/main.astro";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";

/* Check if the user is authenticated */
const auth = getAuth(app);

if (Astro.cookies.has("__session")) {
  const sessionCookie = Astro.cookies.get("__session")?.value || "N/A";
  const decodedCookie = await auth.verifySessionCookie(sessionCookie);

  if (decodedCookie) {
    return Astro.redirect("/dashboard");
  }
}
---

<Layout title="Inicia Sesión">
  <Toaster client:only />

  <div class="flex min-h-svh w-full items-center justify-center p-6 md:p-10">
    <div class="w-full max-w-sm">
      <LoginContainer>
        <form novalidate>
          <div class="flex flex-col gap-6">
            <div class="grid gap-2">
              <Label htmlFor="email">Correo electrónico</Label>
              <Input id="email" type="email" placeholder="m@example.com" />
            </div>
            <div class="grid gap-2">
              <div class="flex items-center">
                <Label htmlFor="password">Contraseña</Label>
              </div>
              <Input id="password" type="password" />
            </div>
            <Button type="submit" className="w-full"> Iniciar sesión </Button>
            <Button
              id="login-with-google"
              variant="outline"
              className="w-full"
              type="button"
            >
              Iniciar sesión con Google
            </Button>
          </div>
          <div class="mt-4 text-center text-sm">
            ¿No tiene una cuenta?{" "}
            <a href="/register" class="underline underline-offset-4">
              Regístrese
            </a>
          </div>
        </form>
      </LoginContainer>
    </div>
  </div>
</Layout>

<script>
  import { getAuth, inMemoryPersistence } from "firebase/auth";
  import {
    GoogleAuthProvider,
    signInWithEmailAndPassword,
    signInWithPopup,
  } from "firebase/auth";
  import { app } from "@/firebase/client";
  import { toast } from "sonner";
  type HTMLInput = HTMLInputElement;

  const auth = getAuth(app);
  auth.setPersistence(inMemoryPersistence);

  function checkValidity(
    email: string,
    password: string,
    emailElem: HTMLInputElement
  ): boolean {
    if (!email || !password) {
      toast.error("Todos los campos son requeridos");
      return false;
    }

    if (!emailElem.checkValidity()) {
      toast.error("Formato de email inválido");
      return false;
    }

    if (!(password.length >= 6)) {
      toast.error("La contraseña debe tener al menos 6 caracteres");
      return false;
    }

    return true;
  }

  // Manejar envío del formulario
  const handleSubmit = async (event: SubmitEvent) => {
    event.preventDefault();

    const emailElem = document.getElementById("email") as HTMLInput;
    const passwordElem = document.getElementById("password") as HTMLInput;
    const email = emailElem.value.trim();
    const password = passwordElem.value.trim();

    // Validaciones
    if (!checkValidity(email, password, emailElem)) {
      return;
    }

    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const idToken = await userCredential.user.getIdToken();
      const response = await fetch("/api/auth/signin", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });

      if (response.ok) {
        window.location.href = "/dashboard";
      } else {
        const error = await response.text();
        toast.error(error);
      }
    } catch (error: any) {
      let message = "Error de conexión";

      switch (error.code) {
        case "auth/invalid-email":
          message = "Formato de email inválido";
          break;
        case "auth/user-disabled":
          message = "Esta cuenta ha sido deshabilitada";
          break;
        case "auth/user-not-found":
        case "auth/wrong-password":
          message = "Correo electrónico o contraseña incorrectos";
          break;
        case "auth/too-many-requests":
          message = "Demasiados intentos. Inténtelo más tarde.";
          break;
        case "auth/network-request-failed":
          message = "Error de red. Verifica tu conexión";
          break;
        case "auth/invalid-credential":
          message = "Correo electrónico y/o contraseña no válidos.";
          break;
        default:
          message = "Error al iniciar sesión. Intente nuevamente";
      }

      toast.error(message);
    }
  };

  const handleGoogleLogin = async () => {
    try {
      const provider = new GoogleAuthProvider();
      provider.addScope("profile");
      provider.addScope("email");

      const userCredential = await signInWithPopup(auth, provider);
      const idToken = await userCredential.user.getIdToken();
      const res = await fetch("/api/auth/signin", {
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });

      if (res.redirected) {
        window.location.assign(res.url);
      }
    } catch (error) {
      toast.error("Error al iniciar sesión con Google");
    }
  };

  document.querySelector("form")?.addEventListener("submit", handleSubmit);
  document
    .getElementById("login-with-google")
    ?.addEventListener("click", handleGoogleLogin);
</script>
